{"version":3,"sources":["Agent.js","UserInput.js","Cakechat.js","App.js","index.js"],"names":["Agent","props","state","pitch","rate","voice","language","emotion","response","background","this","setState","voices","name","lang","createVoices","color","style","backgroundColor","className","onChange","onVoiceChanged","bind","onPitchChanged","type","min","max","defaultValue","onRateChanged","onEmotionChanged","length","map","v","key","result","event","obj","target","value","React","Component","UserInput","text","onTextChanged","onClick","onSend","onStop","Cakechat","endpoint","uri","context","callback","request","XMLHttpRequest","onreadystatechange","onReadyStateChange","ontimeout","onTimeout","timeout","open","setRequestHeader","body","send","JSON","stringify","readyState","status","parse","console","error","log","App","synth","window","speechSynthesis","onvoiceschanged","populateVoices","cakechat","shouldStop","numAgents","activeAgent","agentRefs","createAgentRefs","agents","createAgents","onSendInput","onStopTalking","i","c","ref","push","r","createRef","getVoices","cancel","inputValue","agent","current","activateBackground","clearResponse","getResponse","cakechatCallback","filter","setResponse","utterThis","SpeechSynthesisUtterance","onend","onSpeechEnded","speak","deactivateBackground","utterance","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65d14d62.chunk.js","sourcesContent":["import React from 'react';\n\nclass Agent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // What defines this agent. \n        this.state = {\n            pitch: 100,\n            rate: 70,\n            voice: '', \n            language: '',\n            emotion: 'neutral',\n            response: '',\n            background: \"\",\n        }; \n    }\n    \n    // Set the initial voice of the agent. \n    componentDidUpdate() {\n        if (this.state.voice === '' && this.state.language === '') {\n            this.setState({\n                voice: this.props.voices[0].name,\n                language: this.props.voices[0].lang\n            });\n        }\n    }\n\n    render() {\n        var voices = this.createVoices(); \n        var color = this.state.background; \n        return (\n            <div style={{backgroundColor: color}} className=\"agentcontainer\">\n                <div className=\"propertygroup\">\n                    <h4>Voice Identity</h4>\n                    <select onChange={this.onVoiceChanged.bind(this)}>\n                        {voices}\n                    </select>\n                </div>\n                <div className=\"propertygroup\">\n                    <h4>Language</h4>\n                    <p>{this.state.language}</p>\n                </div>\n                <div className=\"propertygroup\">\n                    <h4>Pitch</h4>\n                    <input onChange={this.onPitchChanged.bind(this)} type=\"range\" min=\"0\" max=\"1000\" defaultValue={this.state.pitch} />\n                    <div>{this.state.pitch/100}</div>\n                </div>\n                <div className=\"propertygroup\">\n                    <h4>Rate</h4>\n                    <input onChange={this.onRateChanged.bind(this)} type=\"range\" min=\"0\" max=\"300\" defaultValue={this.state.rate} />\n                    <div>{this.state.rate/100}</div>\n                </div>\n                <div className=\"propertygroup\">\n                    <h4>Emotion</h4>\n                    <select onChange={this.onEmotionChanged.bind(this)}>\n                        <option>neutral</option>\n                        <option>anger</option>\n                        <option>sadness</option>\n                        <option>fear</option>\n                        <option>joy</option>\n                    </select>\n                </div>\n                <div className=\"propertygroup\">\n                    <h4>Response</h4>\n                    <div>{this.state.response} </div>\n                </div>\n            </div>\n        );\n    }\n\n    createVoices() {\n        let voices = []; \n        if (this.props.voices.length) {\n            voices = this.props.voices.map(v => \n                <option key={v.name} defaultValue={v.name}>\n                {v.name}\n                </option>\n            );\n        }\n        return voices; \n    }\n\n    setResponse(result) {\n        this.setState({\n            response: result\n        }); \n    }\n    \n    clearResponse() {\n        this.setState({\n            response: \"\"\n        });\n    }\n\n    onVoiceChanged(event) { \n        let lang = ''; \n        for (let v in this.props.voices) {\n            let obj = this.props.voices[v];\n            if (obj.name === event.target.value) {\n                lang = obj.lang;\n                break; \n            }\n        }     \n\n        this.setState({\n            voice: event.target.value,\n            language: lang\n        });\n    }\n\n    onEmotionChanged(event) {\n        this.setState({\n            emotion: event.target.value\n        });\n    }\n\n    onPitchChanged(event) {\n        this.setState({\n            pitch: event.target.value\n        });\n    }\n\n    onRateChanged(event) {\n        this.setState({\n            rate: event.target.value\n        });\n    }\n\n    activateBackground() {\n        this.setState({\n            background: \"lightblue\"\n        }); \n    }\n\n    deactivateBackground() {\n        this.setState({\n            background: \"\"\n        });\n    }\n}\n\nexport default Agent;","import React from 'react';\n\nclass UserInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: ''\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"inputcontainer\">\n                <input onChange={this.onTextChanged.bind(this)} className=\"userinput\" type=\"text\"/>\n                <button onClick={this.onSend.bind(this)}>SEND</button>\n                <button onClick={this.onStop.bind(this)}>STOP</button>\n            </div>\n        );\n    }\n\n    onTextChanged(event) {\n        this.setState({\n            text: event.target.value\n        }); \n    }\n\n    onSend(event) {\n        this.props.onSend(this.state.text); \n    }\n\n    onStop(event) {\n        this.props.onStop(); \n    }\n}\n\nexport default UserInput; ","class Cakechat {\n    constructor() {\n        this.endpoint = \"babble-cakechat.xyz\";\n        this.uri = \"https://\" + this.endpoint + \"/cakechat_api/v1/actions/get_response\";\n    }\n\n    getResponse(context, emotion, callback) {\n        var request = new XMLHttpRequest(); \n        request.onreadystatechange = this.onReadyStateChange.bind(this, request, callback, emotion); \n        request.ontimeout = this.onTimeout.bind(this, callback, emotion); \n        request.timeout = 20000; \n        request.open('POST', this.uri, true);\n        request.setRequestHeader(\"Content-Type\", \"application/json\");\n        request.setRequestHeader(\"Accept\",\"application/json\");\n        var body = {'context': [context], 'emotion': emotion}; \n        request.send(JSON.stringify(body));\n    }\n\n    onReadyStateChange(request, callback, emotion) {\n        if (request.readyState === 4) { // DONE\n            if (request.status === 200) { // SUCCESS\n                var response = JSON.parse(request.response)['response'];\n                callback(response); \n            } else if (request.status === 0) { // TIMEOUT\n                // TIMEOUT : We already catch that by registering for that callback. \n            } else { // ANY OTHER ERROR\n                console.error(\"Cakechat request failed with error \" + request.status);\n                console.log(request);\n                callback(\"ERROR\", emotion);\n            }\n        }\n    }\n\n    onTimeout(callback, emotion) {\n        console.error(\"Cakechat request timed out after 10 seconds. It may be down.\"); \n        callback(\"ERROR\", emotion); \n    }\n}\n\nexport default Cakechat; ","import React from 'react';\nimport './App.css';\nimport Agent from './Agent.js';\nimport UserInput from './UserInput.js';\nimport Cakechat from './Cakechat.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Obtain speech object from the browser. \n    this.synth = window.speechSynthesis;\n    this.synth.onvoiceschanged = this.populateVoices.bind(this); // Called when all the voices are loaded. \n    this.cakechat = new Cakechat(); \n   \n    this.state = {\n      voices: []\n    }; \n\n    this.shouldStop = false; \n    this.numAgents = 8; \n    this.activeAgent = 0;\n    this.agentRefs = [];\n\n    this.createAgentRefs(); \n  }\n\n  render() {\n    let agents = this.createAgents(); \n\n    return (\n      <div className=\"container\">\n        <div className=\"agents\">\n          {agents}\n        </div>\n        <UserInput \n          onSend={this.onSendInput.bind(this)} \n          onStop={this.onStopTalking.bind(this)} />\n      </div>\n    );\n  }\n\n  createAgents() {\n    let agents = [];\n    for (let i = 0; i < this.numAgents; i++) {\n      let c = <Agent ref={this.agentRefs[i]} voices={this.state.voices} key={i}/>\n      agents.push(c); \n    }\n    return agents;\n  }\n\n  createAgentRefs() {\n    for (let i = 0; i < this.numAgents; i++) {\n      var r = React.createRef(); \n      this.agentRefs.push(r); \n    }\n  }\n\n  populateVoices() {\n    var voices = this.synth.getVoices().map(obj => {\n      return {\n        name: obj.name,\n        lang: obj.lang\n      };\n    }); \n\n    // This will prompt a re-render of app. \n    this.setState({\n      voices: voices\n    });\n  }\n\n  onStopTalking() {\n    this.synth.cancel(); \n    this.shouldStop = true; \n  }\n\n  onSendInput(inputValue) {\n    let agent = this.agentRefs[this.activeAgent].current; \n    let state = agent.state; \n\n    this.shouldStop = false\n    agent.activateBackground(); \n    agent.clearResponse();\n\n    console.log('Cakechat: Query, Emotion - ' + inputValue + ', ' + state.emotion);\n    this.cakechat.getResponse(inputValue, state.emotion, this.cakechatCallback.bind(this)); \n  }\n\n  cakechatCallback(result, emotion) {\n    let agent = this.agentRefs[this.activeAgent].current; \n    let state = agent.state; \n\n    // Get the voice object based on state. \n    let v = this.synth.getVoices().filter(obj => {\n      return obj.name === state.voice; \n    }); \n\n    // Set agent response and activate background. \n    agent.setResponse(result); \n\n    // Create utter object. \n    let utterThis = new SpeechSynthesisUtterance(result); \n    utterThis.voice = v[0]; \n    utterThis.pitch = state.pitch/100; \n    utterThis.rate = state.rate/100; \n    utterThis.onend = this.onSpeechEnded.bind(this); \n\n    // Utter the words. \n    this.synth.speak(utterThis); \n  }\n\n  onSpeechEnded(event) {\n    // Deactivate background. \n    let agent = this.agentRefs[this.activeAgent].current; \n    agent.deactivateBackground(); \n\n    if (this.shouldStop) {\n      // Ignore.\n    } else {\n      // Set next agent that will utter the words. \n      this.activeAgent = (this.activeAgent + 1) % this.numAgents; \n\n      // Send the result as the input for the next utterance. \n      this.onSendInput(event.utterance.text); \n    }\n  }\n}\n\nexport default App;\n\n// Deploy the agent to the website (finalize the prototype)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Single render function for the entire application. \nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}